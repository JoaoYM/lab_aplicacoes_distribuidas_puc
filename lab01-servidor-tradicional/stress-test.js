// stress-test.js
import http from 'k6/http'; // üí° K6 usa seu pr√≥prio m√≥dulo http
import { check, sleep } from 'k6';

// Configura√ß√µes do teste
export const options = {
  stages: [
    { duration: '30s', target: 1000 }, // Sobe para 100 usu√°rios virtuais em 30s
    { duration: '1m', target: 1000 },  // Mant√©m 100 usu√°rios por 1 minuto
    { duration: '15s', target: 0 },   // Desce para 0 usu√°rios
  ],
  thresholds: {
    'http_req_failed': ['rate<0.01'], // O teste falha se mais de 1% das requisi√ß√µes derem erro
    'http_req_duration': ['p(95)<800'], // 95% das requisi√ß√µes devem ser abaixo de 800ms
  },
};

const BASE_URL = 'http://localhost:3000/api';
const USER_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImQ1NzI3MjU0LWIwNGUtNDg2ZS1hMzQwLWE2ZjU3NWVjNWY0YSIsImVtYWlsIjoidXNlcjJAdGVzdC5jb20iLCJ1c2VybmFtZSI6InRlc3R1c2VyMiIsImlhdCI6MTc1NjA3OTA4OSwiZXhwIjoxNzU2MTY1NDg5fQ.TPeTVK4JLFK9bP3e1RFORThN2TBzYQToaqtXLri0v4E';

// A fun√ß√£o default √© o que cada usu√°rio virtual vai executar em loop
export default function () {
  const authHeaders = {
    headers: {
      'Authorization': `Bearer ${USER_TOKEN}`,
    },
  };

  // üí° A forma de fazer a requisi√ß√£o no k6 √© mais simples
  const res = http.get(`${BASE_URL}/tasks?limit=20`, authHeaders);

  // 'check' √© como o k6 verifica se a requisi√ß√£o foi bem-sucedida
  check(res, {
    'status was 200': (r) => r.status == 200,
  });

  // Pausa por 1 segundo para simular um usu√°rio real
  sleep(1);
}