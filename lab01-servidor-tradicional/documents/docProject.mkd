# Lab API - Servidor de Aplica√ß√£o Tradicional

Este projeto implementa uma API RESTful para um sistema de gerenciamento de tarefas (To-Do List), constru√≠do com uma arquitetura de servidor tradicional (monol√≠tica) utilizando Node.js, Express e SQLite.

O objetivo √© demonstrar os fundamentos de sistemas cliente-servidor, opera√ß√µes CRUD, autentica√ß√£o, e fornecer uma base s√≥lida para compara√ß√£o com outras arquiteturas de sistemas distribu√≠dos.

## ‚ú® Features

* **Autentica√ß√£o JWT:** Sistema completo de registro e login com tokens JSON Web Tokens para seguran√ßa dos endpoints.
* **Gerenciamento de Tarefas:** Opera√ß√µes CRUD (Criar, Ler, Atualizar, Deletar) completas para as tarefas de cada usu√°rio.
* **Filtros Avan√ßados e Pagina√ß√£o:** A listagem de tarefas suporta m√∫ltiplos filtros combinados (status, prioridade, categoria, tags, data), ordena√ß√£o e pagina√ß√£o.
* [cite_start]**Cache em Mem√≥ria:** Cache para consultas frequentes (`GET`) para melhorar a performance e reduzir a carga no banco de dados[cite: 29].
* **Seguran√ßa:** Implementa√ß√£o de boas pr√°ticas de seguran√ßa, incluindo:
    * [cite_start]**Helmet:** para prote√ß√£o contra vulnerabilidades web comuns[cite: 118].
    * [cite_start]**Rate Limiting:** Limites de requisi√ß√£o por IP para rotas de autentica√ß√£o e por usu√°rio para as rotas da API, prevenindo ataques de for√ßa bruta e DoS[cite: 118, 145].
    * [cite_start]**Valida√ß√£o de Dados:** Valida√ß√£o de payloads de entrada com Joi para garantir a integridade dos dados[cite: 135].
* [cite_start]**Logging Estruturado:** Logs detalhados com Winston para monitoramento e depura√ß√£o facilitada[cite: 119].
* **Documenta√ß√£o Interativa:** Endpoint com Swagger/OpenAPI para visualiza√ß√£o e teste da API.

## üõ†Ô∏è Tecnologias Utilizadas

### Backend
* **Node.js**: Ambiente de execu√ß√£o JavaScript.
* [cite_start]**Express**: Framework para constru√ß√£o da API REST[cite: 117].
* [cite_start]**SQLite3**: Banco de dados relacional file-based[cite: 1].
* [cite_start]**JSON Web Token (jsonwebtoken)**: Para gera√ß√£o e verifica√ß√£o de tokens de autentica√ß√£o[cite: 1].
* [cite_start]**bcryptjs**: Para hashing de senhas[cite: 1].
* [cite_start]**Joi**: Para valida√ß√£o de schemas e payloads[cite: 1].
* [cite_start]**Winston**: Para logging estruturado[cite: 1].
* [cite_start]**Node-cache**: Para implementa√ß√£o de cache em mem√≥ria[cite: 1].
* [cite_start]**Helmet**: Middleware de seguran√ßa para headers HTTP[cite: 2].
* [cite_start]**express-rate-limit**: Middleware para limitar requisi√ß√µes[cite: 1].
* **cors, body-parser, uuid**: Utilit√°rios para a API.

### Desenvolvimento
* [cite_start]**Nodemon**: Para reiniciar o servidor automaticamente durante o desenvolvimento[cite: 1].
* [cite_start]**Jest & Supertest**: Para testes automatizados[cite: 1].
* **k6**: Para testes de carga e estresse.

## üöÄ Como Executar

### Pr√©-requisitos
* Node.js v18+
* npm

### 1. Clonar o Reposit√≥rio
```bash
git clone <N√£o se aplica, input de arquivo submetido>
cd lab01-servidor-tradicional
```

### 2. Instalar as Depend√™ncias
```bash
npm install
```

### 3. Iniciar o Servidor
* **Modo de Desenvolvimento (com auto-reload):**
  ```bash
  npm run dev
  ```
* **Modo de Produ√ß√£o:**
  ```bash
  npm start
  ```

O servidor estar√° rodando em `http://localhost:3000`.

## Endpoints da API

A URL base para todos os endpoints √© `http://localhost:3000`.

---

### Autentica√ß√£o (`/api/auth`)

#### 1. Registrar um Novo Usu√°rio
* **`POST /api/auth/register`**
* **Descri√ß√£o:** Cria uma nova conta de usu√°rio.
* **Request Body:**
  ```json
  {
      "email": "user@example.com",
      "username": "newuser",
      "password": "password123",
      "firstName": "Jo√£o",
      "lastName": "Silva"
  }
  ```
* **Respostas:**
    * **`201 Created`**: Sucesso. [cite_start]Retorna o objeto do usu√°rio (sem a senha) e um token JWT[cite: 89, 137].
    * [cite_start]**`409 Conflict`**: Se o email ou username j√° estiver em uso[cite: 87, 138].

#### 2. Realizar Login
* **`POST /api/auth/login`**
* **Descri√ß√£o:** Autentica um usu√°rio e retorna um token JWT v√°lido por 24 horas.
* **Request Body:**
  ```json
  {
      "identifier": "user@example.com", // Pode ser o email ou o username
      "password": "password123"
  }
  ```
* **Respostas:**
    * **`200 OK`**: Sucesso. [cite_start]Retorna o objeto do usu√°rio (sem a senha) e um token JWT[cite: 94, 140].
    * [cite_start]**`401 Unauthorized`**: Credenciais inv√°lidas[cite: 93, 141].

---

### Tarefas (`/api/tasks`)

Todos os endpoints de tarefas s√£o protegidos e requerem um token JWT no header `Authorization`.

* **Header de Autentica√ß√£o:** `Authorization: Bearer <SEU_TOKEN_JWT>`

#### 1. Listar Tarefas
* **`GET /api/tasks`**
* **Descri√ß√£o:** Retorna uma lista paginada de tarefas do usu√°rio autenticado, com suporte a filtros e ordena√ß√£o.
* **Query Parameters (Opcionais):**
    * `completed` (boolean): `true` ou `false`
    * `priority` (string): `low`, `medium`, `high`, `urgent`
    * `category` (string)
    * `tags` (string): Tags separadas por v√≠rgula (ex: `docs,api`)
    * `startDate` (string): Data de in√≠cio (formato `YYYY-MM-DD`)
    * `endDate` (string): Data de fim (formato `YYYY-MM-DD`)
    * `page` (integer): Padr√£o `1`
    * `limit` (integer): Padr√£o `10`
    * `sortBy` (string): Campo para ordena√ß√£o (padr√£o `createdAt`)
    * `sortOrder` (string): `ASC` ou `DESC` (padr√£o `DESC`)
* **Respostas:**
    * **`200 OK`**: Sucesso. Retorna um objeto com dados de pagina√ß√£o e a lista de tarefas.
    * **`401 Unauthorized`**: Token inv√°lido ou ausente.

#### 2. Criar Tarefa
* **`POST /api/tasks`**
* **Descri√ß√£o:** Cria uma nova tarefa.
* **Request Body:**
  ```json
  {
      "title": "Documentar a API",
      "description": "Criar um arquivo README.md com todos os endpoints.",
      "priority": "high",
      "category": "Desenvolvimento",
      "tags": ["docs", "markdown"]
  }
  ```
* **Respostas:**
    * **`201 Created`**: Sucesso. Retorna o objeto da tarefa rec√©m-criada.
    * **`400 Bad Request`**: Dados inv√°lidos.
    * **`401 Unauthorized`**: Token inv√°lido ou ausente.

#### 3. Buscar Tarefa por ID
* **`GET /api/tasks/{id}`**
* **Descri√ß√£o:** Retorna uma tarefa espec√≠fica pelo seu ID.
* **Respostas:**
    * **`200 OK`**: Sucesso. [cite_start]Retorna o objeto da tarefa[cite: 151].
    * **`401 Unauthorized`**: Token inv√°lido ou ausente.
    * [cite_start]**`404 Not Found`**: Tarefa n√£o encontrada ou n√£o pertence ao usu√°rio[cite: 150].

#### 4. Atualizar Tarefa
* **`PUT /api/tasks/{id}`**
* **Descri√ß√£o:** Atualiza uma ou mais propriedades de uma tarefa existente.
* **Request Body:** (Envie apenas os campos que deseja alterar)
  ```json
  {
      "completed": true,
      "priority": "low"
  }
  ```
* **Respostas:**
    * **`200 OK`**: Sucesso. [cite_start]Retorna o objeto da tarefa atualizada[cite: 194].
    * [cite_start]**`400 Bad Request`**: Nenhum campo para atualizar foi fornecido[cite: 188].
    * **`401 Unauthorized`**: Token inv√°lido ou ausente.
    * [cite_start]**`404 Not Found`**: Tarefa n√£o encontrada ou n√£o pertence ao usu√°rio[cite: 191].

#### 5. Deletar Tarefa
* **`DELETE /api/tasks/{id}`**
* **Descri√ß√£o:** Remove uma tarefa.
* **Respostas:**
    * **`200 OK`**: Sucesso. [cite_start]Retorna uma mensagem de confirma√ß√£o[cite: 198].
    * **`401 Unauthorized`**: Token inv√°lido ou ausente.
    * [cite_start]**`404 Not Found`**: Tarefa n√£o encontrada ou n√£o pertence ao usu√°rio[cite: 197].

#### 6. Obter Estat√≠sticas
* **`GET /api/tasks/stats/summary`**
* **Descri√ß√£o:** Retorna um resumo com o total de tarefas, quantas est√£o completas e pendentes.
* **Respostas:**
    * **`200 OK`**: Sucesso. [cite_start]Retorna o objeto com as estat√≠sticas[cite: 147, 148].
    * **`401 Unauthorized`**: Token inv√°lido ou ausente.